# import from aiogram
from aiogram import Bot, Dispatcher, types

# import from my custom files
from config import TOKEN, questions
from myclass import Sqlighter

# import from other libraries
from random import choice
from time import sleep

# Initialize bot and dispatcher
bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot)

# Create object for data base
db = Sqlighter()

def buttons(text, call):
    button = types.InlineKeyboardMarkup()
    text = text.split(";")
    call = call.split(";")
    for text, call in zip(text, call):
        button.add(types.InlineKeyboardButton(text=text, callback_data=call))
    return button

def random_q(chat_id):
    random_question = choice(questions)
    db.update_value(
                    name="current_question", 
                    value=random_question,
                    table="chats", 
                    chat_id=chat_id
    )
    return random_question

def turn(chat_id):
    i = db.get_value(name="i", value="chats", chat_id=chat_id)

    try:
        player_whose_turn = db.get_list("gamers", chat_id)[i]
    except:
        db.update_value(name="i", value=0, table="chats", chat_id=chat_id)

    i = db.get_value("i", "chats", chat_id=chat_id)

    player_whose_turn = db.get_list("gamers", chat_id)[i]
    player_whose_turn_id = db.get_list("gamers_user_id", chat_id)[i]

    db.update_value(name="player_whose_turn",
                    value=player_whose_turn, 
                    table="chats", 
                    chat_id=chat_id)
    db.update_value(name="player_whose_turn_id",
                    value=player_whose_turn_id, 
                    table="chats", 
                    chat_id=chat_id)
    db.update_value(name="i", 
                    value=i+1, 
                    table="chats", 
                    chat_id=chat_id)

    return player_whose_turn

def on_startup():
    """–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    db.create_table()
    db.create_rating_table()
    db.create_table_questions()

async def game(message):
    await message.reply("–ù–∞—á–∞—Ç –Ω–∞–±–æ—Ä –≤ –Ω–æ–≤—É—é –∏–≥—Ä—É\n\n/new_round –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞", reply_markup = buttons("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "join_game"))
    await message.answer("–í –∏–≥—Ä–µ: ")
    db.update_value(name="gamers", value="", table="chats", chat_id=message.chat.id)

async def give_question(message):
    chat_id = message.chat.id
    await message.answer("–í–æ–ø—Ä–æ—Å: " + random_q(chat_id), reply_markup=buttons("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!", "got_answer"))
    db.update_value(name="satisfied_players", 
                    value=0,
                    table="chats", 
                    chat_id=chat_id)

    db.update_value(name="not_satisfied_players", 
                    value=0,
                    table="chats", 
                    chat_id=chat_id)

    db.update_value(name="pressed_satisfied_users",
                    value="", 
                    table="chats", 
                    chat_id=chat_id)

    db.update_value(name="pressed_not_satisfied_users",
                    value="", 
                    table="chats", 
                    chat_id=chat_id)

    db.update_value(name="rate_question", 
                    value=False,
                    table="chats", 
                    chat_id=message.chat.id)

    db.update_value(name="got_answer_pressed", 
                    value=False, 
                    table="chats", 
                    chat_id=message.chat.id)


async def rate_question_results(message):
    chat_id = message.chat.id
    satisfied = db.get_value(name="satisfied_players", 
                                table="chats", 
                                chat_id=chat_id)
    not_satisfied = db.get_value(name="not_satisfied_players", 
                                table="chats", 
                                chat_id=chat_id)
    player = db.get_value(name="player_whose_turn", 
                                table="chats", 
                                chat_id=chat_id)

   

    await message.answer("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: </b>" + 
                        "\n‚ù§Ô∏è - " + str(
                                        db.get_value(
                                                    name="satisfied_players", 
                                                    table="chats", 
                                                    chat_id=chat_id
                                                    )
                                                    
                                        ) + 
                        "\nüíî - " + str(
                                        db.get_value(
                                                    name="not_satisfied_players", 
                                                    table="chats", 
                                                    chat_id=chat_id
                                                    )
                                        )
    )
    
    if satisfied > not_satisfied:
        await message.answer(player + " —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É\n\n–ñ–¥—É –∫–æ–º–∞–Ω–¥—É /new_round")
        db.update_value(name="rate_question", value=True,
                        table="chats", chat_id=message.chat.id)

    elif satisfied == not_satisfied:
        await message.answer(player + " —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É\n\n–ñ–¥—É –∫–æ–º–∞–Ω–¥—É /new_round")
        db.update_value(name="rate_question", value=True,
                        table="chats", chat_id=message.chat.id)

    else:
        await message.answer(player + " —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=buttons("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å;–ü–µ—Ä–µ–∑–∞–¥–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π", "next_question;prev_question"))

async def new_round(message):
    chat_id = message.chat.id
    # markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –≤ –ª—Å‚û°Ô∏è", url="https://t.me/truth_or_truth_bot", callback_data="give_answer"))
    if db.get_list("gamers", chat_id) != []:
        if db.get_value(name="rate_question", table="chats", chat_id=chat_id) == True:
            await message.answer("–°–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç: " + turn(message.chat.id))

            db.update_value(name="next_question_chosen", value=False, table="chats", chat_id=message.chat.id)
            db.update_value(name="previous_question_chosen", value=False, table="chats", chat_id=message.chat.id)

            await give_question(message)

        else:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω'")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤!\n–ù–∞–±–æ—Ä –≤ –∏–≥—Ä—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")


async def got_answer_process(message):
    db.update_value(name="got_answer_pressed", value=True, table="chats", chat_id=message.chat.id)

    await message.answer("–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ " + db.get_value("player_whose_turn", "chats", message.chat.id), reply_markup=buttons("‚ù§Ô∏è;üíî", "satisfied;not_satisfied"))
    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥")

    sleep(15)

    await rate_question_results(message)
    
async def process_next_prev_q(callback_query):
    chat_id = callback_query.message.chat.id
    if db.get_value(name="player_whose_turn", table="chats", chat_id=chat_id) != callback_query.from_user.first_name:

        if db.get_value(name="next_question_chosen", table="chats", chat_id=chat_id) == False and db.get_value(name="previous_question_chosen", table="chats", chat_id=chat_id) == False:
            if callback_query.data == "next_question":
                await callback_query.message.answer("–ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å\n\n–ñ–¥—É –∫–æ–º–∞–Ω–¥—É /new_round")

                db.update_value(name="next_question_chosen", value=True, table="chats")

            else:
                db.update_value(name="previous_question_chosen",value=True, table="chats", chat_id=chat_id)
                await give_question(callback_query.message)

        else:
            await callback_query.answer("–í–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω")
    else:
        await callback_query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è")




    
